// Generated by CoffeeScript 1.12.7

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var Client, Promise, URL_KEYS, auth, crypto, errors, metadata, normalizeUrl, object, request, search;

  crypto = require('crypto');

  request = require('request');

  Promise = require('bluebird');

  metadata = require('./clientModules/metadata');

  search = require('./clientModules/search');

  object = require('./clientModules/object');

  auth = require('./utils/auth');

  normalizeUrl = require('./utils/normalizeUrl');

  errors = require('./utils/errors');

  URL_KEYS = {
    GET_METADATA: "GetMetadata",
    GET_OBJECT: "GetObject",
    SEARCH: "Search",
    UPDATE: "Update",
    ACTION: "Action",
    LOGIN: "Login",
    LOGOUT: "Logout"
  };

  Client = (function() {
    function Client(_settings) {
      var a1, debugRequest, defaults, key, retsUaAuth, val;
      this.settings = {};
      for (key in _settings) {
        val = _settings[key];
        this.settings[key] = val;
      }
      this.headers = {
        'User-Agent': this.settings.userAgent || 'RETS node-client/4.x',
        'RETS-Version': this.settings.version || 'RETS/1.7.2'
      };
      if (this.settings.userAgentPassword) {
        a1 = crypto.createHash('md5').update([this.settings.userAgent, this.settings.userAgentPassword].join(":")).digest('hex');
        retsUaAuth = crypto.createHash('md5').update([a1, "", this.settings.sessionId || "", this.settings.version || this.headers['RETS-Version']].join(":")).digest('hex');
        this.headers['RETS-UA-Authorization'] = "Digest " + retsUaAuth;
      }
      debugRequest = require('debug')('rets-client:request');
      if (debugRequest.enabled) {
        require('request-debug')(request, function(type, data) {
          return debugRequest(type + ":", data);
        });
      }
      if ('requestDebugFunction' in this.settings) {
        require('request-debug')(request, this.settings.requestDebugFunction);
      }
      defaults = {
        jar: request.jar(),
        headers: this.headers
      };
      if (this.settings.method) {
        defaults.method = this.settings.method;
      } else {
        defaults.method = 'GET';
      }
      if (this.settings.username && this.settings.password) {
        defaults.auth = {
          'user': this.settings.username,
          'pass': this.settings.password,
          'sendImmediately': false
        };
      }
      if (this.settings.timeout) {
        defaults.timeout = this.settings.timeout;
      }
      if (this.settings.proxyUrl) {
        defaults.proxy = this.settings.proxyUrl;
        if (this.settings.useTunnel) {
          defaults.tunnel = this.settings.useTunnel;
        }
      }
      this.baseRetsSession = request.defaults(defaults);
      this.loginRequest = Promise.promisify(this.baseRetsSession.defaults({
        uri: this.settings.loginUrl
      }));
    }

    Client.prototype.login = function() {
      return auth.login(this.loginRequest, this).then((function(_this) {
        return function(retsContext) {
          var a1, hasPermissions, key, missingPermissions, retsUaAuth, val;
          _this.systemData = retsContext.systemData;
          _this.loginHeaderInfo = retsContext.headerInfo;
          _this.urls = {};
          for (key in URL_KEYS) {
            val = URL_KEYS[key];
            if (_this.systemData[val]) {
              _this.urls[val] = normalizeUrl(_this.systemData[val], _this.settings.loginUrl);
            }
          }
          hasPermissions = true;
          missingPermissions = [];
          if (_this.urls[URL_KEYS.GET_METADATA]) {
            _this.metadata = metadata(_this.baseRetsSession.defaults({
              uri: _this.urls[URL_KEYS.GET_METADATA]
            }), _this);
          } else {
            hasPermissions = false;
            missingPermissions.push(URL_KEYS.GET_METADATA);
          }
          if (_this.urls[URL_KEYS.SEARCH]) {
            _this.search = search(_this.baseRetsSession.defaults({
              uri: _this.urls[URL_KEYS.SEARCH]
            }), _this);
          } else {
            hasPermissions = false;
            missingPermissions.push(URL_KEYS.SEARCH);
          }
          if (_this.urls[URL_KEYS.GET_OBJECT]) {
            _this.objects = object(_this.baseRetsSession.defaults({
              uri: _this.urls[URL_KEYS.GET_OBJECT]
            }), _this);
          }
          _this.logoutRequest = Promise.promisify(_this.baseRetsSession.defaults({
            uri: _this.urls[URL_KEYS.LOGOUT]
          }));
          if (!hasPermissions) {
            throw new errors.RetsPermissionError(missingPermissions);
          }
          if (_this.settings.userAgentPassword && _this.settings.sessionId) {
            a1 = crypto.createHash('md5').update([_this.settings.userAgent, _this.settings.userAgentPassword].join(":")).digest('hex');
            retsUaAuth = crypto.createHash('md5').update([a1, "", _this.settings.sessionId || "", _this.settings.version || _this.headers['RETS-Version']].join(":")).digest('hex');
            _this.headers['RETS-UA-Authorization'] = "Digest " + retsUaAuth;
          }
          return _this;
        };
      })(this));
    };

    Client.prototype.logout = function() {
      return auth.logout(this.logoutRequest, this).then((function(_this) {
        return function(retsContext) {
          return _this.logoutHeaderInfo = retsContext.headerInfo;
        };
      })(this));
    };

    return Client;

  })();

  Client.getAutoLogoutClient = function(settings, handler) {
    return Promise["try"](function() {
      var client;
      client = new Client(settings);
      return client.login().then(function() {
        return Promise["try"](function() {
          return handler(client);
        })["finally"](function() {
          return client.logout();
        });
      });
    });
  };

  module.exports = Client;

}).call(this);

// Generated by CoffeeScript 1.12.7

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var Promise, errors, hex2a, query, queryOptionHelpers, replyCodes, retsHttp, retsParsing, searchRets, through2,
    hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  through2 = require('through2');

  queryOptionHelpers = require('../utils/queryOptions');

  errors = require('../utils/errors');

  hex2a = require('../utils/hex2a');

  replyCodes = require('../utils/replyCodes');

  retsParsing = require('../utils/retsParsing');

  retsHttp = require('../utils/retsHttp');

  errors = require('../utils/errors');


  /*
   * Invokes RETS search operation.
   *
   * @param _queryOptions Search query options.
   *    See RETS specification for query options.
   *
   *    Default values for query params:
   *
   *       queryType:'DMQL2',
   *       format:'COMPACT-DECODED',
   *       count:1,
   *       standardNames:0,
   *       restrictedIndicator:'***',
   *       limit:"NONE"
   */

  searchRets = function(_queryOptions) {
    return Promise["try"]((function(_this) {
      return function() {
        var queryOptions;
        queryOptions = queryOptionHelpers.normalizeOptions(_queryOptions);
        return retsHttp.callRetsMethod({
          retsMethod: 'search',
          queryOptions: queryOptions
        }, _this.retsSession, _this.client).then(function(retsContext) {
          return {
            text: retsContext.body,
            headerInfo: retsContext.headerInfo
          };
        });
      };
    })(this));
  };


  /*
   *
   * Helper that performs a targeted RETS query and parses results.
   *
   * @param searchType Rets resource type (ex: Property)
   * @param classType Rets class type (ex: RESI)
   * @param query Rets query string. See RETS specification - (ex: MatrixModifiedDT=2014-01-01T00:00:00.000+)
   * @param options Search query options (optional).
   *    See RETS specification for query options.
   *
   *    Default values for query params:
   *
   *       queryType:'DMQL2',
   *       format:'COMPACT-DECODED',
   *       count:1,
   *       standardNames:0,
   *       restrictedIndicator:'***',
   *       limit:"NONE"
   *
   *       Please note that queryType and format are immutable.
   */

  query = function(resourceType, classType, queryString, options, parserEncoding) {
    if (options == null) {
      options = {};
    }
    if (parserEncoding == null) {
      parserEncoding = 'UTF-8';
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var currEntry, result, retsContext;
        result = {
          results: [],
          maxRowsExceeded: false
        };
        currEntry = null;
        retsContext = _this.stream.query(resourceType, classType, queryString, options, null, parserEncoding);
        return retsContext.retsStream.pipe(through2.obj(function(event, encoding, callback) {
          var key, ref, ref1, value;
          switch (event.type) {
            case 'data':
              result.results.push(event.payload);
              break;
            case 'status':
              ref = event.payload;
              for (key in ref) {
                if (!hasProp.call(ref, key)) continue;
                value = ref[key];
                result[key] = value;
              }
              break;
            case 'count':
              result.count = event.payload;
              break;
            case 'done':
              ref1 = event.payload;
              for (key in ref1) {
                if (!hasProp.call(ref1, key)) continue;
                value = ref1[key];
                result[key] = value;
              }
              result.headerInfo = retsContext.headerInfo;
              resolve(result);
              break;
            case 'error':
              reject(event.payload);
          }
          return callback();
        }));
      };
    })(this));
  };

  module.exports = function(_retsSession, _client) {
    if (!_retsSession) {
      throw new errors.RetsParamError('System data not set; invoke login().');
    }
    return {
      retsSession: Promise.promisify(_retsSession),
      client: _client,
      searchRets: searchRets,
      query: query,
      stream: require('./search.stream')(_retsSession, _client)
    };
  };

}).call(this);

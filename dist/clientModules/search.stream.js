// Generated by CoffeeScript 1.12.7

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var errors, query, queryOptionHelpers, retsHttp, retsParsing, searchRets, through2;

  through2 = require('through2');

  queryOptionHelpers = require('../utils/queryOptions');

  retsHttp = require('../utils/retsHttp');

  retsParsing = require('../utils/retsParsing');

  errors = require('../utils/errors');


  /*
   * Invokes RETS search operation and streams the resulting XML.
   *
   * @param _queryOptions Search query options.
   *    See RETS specification for query options.
   *
   *    Default values for query params:
   *
   *       queryType:'DMQL2',
   *       format:'COMPACT-DECODED',
   *       count:1,
   *       standardNames:0,
   *       restrictedIndicator:'***',
   *       limit:"NONE"
   * @param headerInfoCallback optional callback to receive response header info
   *
   */

  searchRets = function(_options, responseHandler) {
    return Promise["try"]((function(_this) {
      return function() {
        var queryOptions;
        queryOptions = queryOptionHelpers.normalizeOptions(_options);
        return retsHttp.streamRetsMethod({
          retsMethod: 'search',
          queryOptions: queryOptions,
          responseHandler: responseHandler,
          parser: through2()
        }, _this.retsSession, _this.client).then(function(retsContext) {
          return {
            headerInfo: retsContext.headerInfo,
            rawStream: retsContext.parser
          };
        });
      };
    })(this));
  };


  /*
   *
   * Helper that performs a targeted RETS query and streams parsed (or semi-parsed) results
   *
   * @param searchType Rets resource type (ex: Property)
   * @param classType Rets class type (ex: RESI)
   * @param query Rets query string. See RETS specification - (ex: MatrixModifiedDT=2014-01-01T00:00:00.000+)
   * @param options Search query options (optional).
   *    See RETS specification for query options.
   * @param rawData flag indicating whether to skip parsing of column and data elements.
   *
   *    Default values for query params:
   *
   *       queryType:'DMQL2',
   *       format:'COMPACT-DECODED',
   *       count:1,
   *       standardNames:0,
   *       restrictedIndicator:'***',
   *       limit:"NONE"
   *
   *       Please note that queryType and format are immutable.
   */

  query = function(resourceType, classType, queryString, _options, rawData, parserEncoding) {
    var baseOpts, mainOptions, queryOptions, retsContext;
    if (_options == null) {
      _options = {};
    }
    if (rawData == null) {
      rawData = false;
    }
    if (parserEncoding == null) {
      parserEncoding = 'UTF-8';
    }
    baseOpts = {
      searchType: resourceType,
      "class": classType,
      query: queryString
    };
    mainOptions = queryOptionHelpers.mergeOptions(baseOpts, _options);
    delete mainOptions.queryType;
    if (mainOptions.format !== 'COMPACT-DECODED' && mainOptions.format !== 'COMPACT') {
      delete mainOptions.format;
    }
    queryOptions = queryOptionHelpers.normalizeOptions(mainOptions);
    retsContext = retsParsing.getStreamParser({
      retsMethod: 'search',
      queryOptions: queryOptions
    }, null, rawData, parserEncoding);
    retsHttp.streamRetsMethod(retsContext, this.retsSession, this.client);
    return {
      headerInfo: retsContext.headerInfo,
      retsStream: retsContext.retsStream
    };
  };

  module.exports = function(_retsSession, _client) {
    if (!_retsSession) {
      throw new errors.RetsParamError('System data not set; invoke login().');
    }
    return {
      retsSession: _retsSession,
      client: _client,
      query: query,
      searchRets: searchRets
    };
  };

}).call(this);

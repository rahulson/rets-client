// Generated by CoffeeScript 1.12.7

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var _queryOptionsDefaults, capitalizeFirstLetter, errors, mergeOptions, normalizeOptions, remapKeys,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  errors = require('./errors');

  mergeOptions = function() {
    var args, i, index, key, options, ref, result;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (args.length === 0) {
      return {};
    }
    result = {};
    for (index = i = ref = args.length - 1; ref <= 0 ? i <= 0 : i >= 0; index = ref <= 0 ? ++i : --i) {
      options = args[index];
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        result[key] = options[key];
      }
    }
    return result;
  };

  _queryOptionsDefaults = {
    queryType: 'DMQL2',
    format: 'COMPACT-DECODED',
    count: 1,
    standardNames: 0,
    restrictedIndicator: '***',
    limit: 'NONE'
  };

  capitalizeFirstLetter = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  remapKeys = function(obj) {
    var key, result, value;
    result = {};
    for (key in obj) {
      value = obj[key];
      result[capitalizeFirstLetter(key)] = value;
    }
    return result;
  };

  normalizeOptions = function(queryOptions) {
    if (!queryOptions) {
      throw errors.RetsParamError('search', 'queryOptions is required.');
    }
    if (!queryOptions.searchType) {
      throw errors.RetsProcessingError('search', 'searchType is required (ex: Property');
    }
    if (!queryOptions["class"]) {
      throw errors.RetsProcessingError('search', 'class is required (ex: RESI)');
    }
    if (!queryOptions.query) {
      throw errors.RetsProcessingError('search', 'query is required (ex: (MatrixModifiedDT=2014-01-01T00:00:00.000+) )');
    }
    return remapKeys(mergeOptions(queryOptions, _queryOptionsDefaults));
  };

  module.exports = {
    mergeOptions: mergeOptions,
    normalizeOptions: normalizeOptions
  };

}).call(this);

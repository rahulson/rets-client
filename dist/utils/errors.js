// Generated by CoffeeScript 1.12.7

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var RetsError, RetsParamError, RetsPermissionError, RetsProcessingError, RetsReplyError, RetsServerError, ensureRetsError, getErrorMessage, headersHelper, replyCodes, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  replyCodes = require('./replyCodes');

  headersHelper = require('./headers');

  util = require('util');

  getErrorMessage = function(err) {
    var inspect;
    if (err == null) {
      return JSON.stringify(err);
    }
    if (err.message) {
      return err.message;
    }
    if (err.toString() === '[object Object]') {
      inspect = util.inspect(err, {
        depth: null
      });
      return inspect.replace(/,?\n +\w+: undefined/g, '');
    } else {
      return err.toString();
    }
  };

  RetsError = (function(superClass) {
    extend(RetsError, superClass);

    function RetsError() {
      return RetsError.__super__.constructor.apply(this, arguments);
    }

    return RetsError;

  })(Error);

  RetsReplyError = (function(superClass) {
    extend(RetsReplyError, superClass);

    function RetsReplyError(retsContext, replyCode, replyText) {
      this.replyCode = replyCode;
      this.replyText = replyText;
      this.name = 'RetsReplyError';
      this.replyTag = replyCodes.tagMap[this.replyCode] != null ? replyCodes.tagMap[this.replyCode] : 'unknown reply code';
      this.retsMethod = retsContext.retsMethod, this.queryOptions = retsContext.queryOptions, this.headerInfo = retsContext.headerInfo;
      this.message = "RETS Server reply while attempting " + this.retsMethod + " - ReplyCode " + this.replyCode + " (" + this.replyTag + "); ReplyText: " + this.replyText;
      Error.captureStackTrace(this, RetsReplyError);
    }

    return RetsReplyError;

  })(RetsError);

  RetsServerError = (function(superClass) {
    extend(RetsServerError, superClass);

    function RetsServerError(retsContext, httpStatus, httpStatusMessage) {
      this.httpStatus = httpStatus;
      this.httpStatusMessage = httpStatusMessage;
      this.name = 'RetsServerError';
      this.retsMethod = retsContext.retsMethod, this.queryOptions = retsContext.queryOptions, this.headerInfo = retsContext.headerInfo;
      this.message = "RETS Server error while attempting " + this.retsMethod + " - HTTP Status " + this.httpStatus + " returned (" + this.httpStatusMessage + ")";
      Error.captureStackTrace(this, RetsServerError);
    }

    return RetsServerError;

  })(RetsError);

  RetsProcessingError = (function(superClass) {
    extend(RetsProcessingError, superClass);

    function RetsProcessingError(retsContext, sourceError) {
      this.sourceError = sourceError;
      this.name = 'RetsProcessingError';
      this.retsMethod = retsContext.retsMethod, this.queryOptions = retsContext.queryOptions, this.headerInfo = retsContext.headerInfo;
      this.message = "Error while processing RETS response for " + this.retsMethod + " - " + (getErrorMessage(this.sourceError));
      Error.captureStackTrace(this, RetsProcessingError);
    }

    return RetsProcessingError;

  })(RetsError);

  RetsParamError = (function(superClass) {
    extend(RetsParamError, superClass);

    function RetsParamError(message) {
      this.message = message;
      this.name = 'RetsParamError';
      Error.captureStackTrace(this, RetsParamError);
    }

    return RetsParamError;

  })(RetsError);

  RetsPermissionError = (function(superClass) {
    extend(RetsPermissionError, superClass);

    function RetsPermissionError(missing) {
      if (missing == null) {
        missing = [];
      }
      this.name = 'RetsPermissionError';
      this.message = "Login was successful, but this account does not have the proper permissions.";
      if (missing.length) {
        this.message += " Missing the following permissions: " + (missing.join(', '));
      }
      Error.captureStackTrace(this, RetsPermissionError);
    }

    return RetsPermissionError;

  })(RetsError);

  ensureRetsError = function(retsContext, error) {
    if (error instanceof RetsError) {
      return error;
    } else {
      return new RetsProcessingError(retsContext, error);
    }
  };

  module.exports = {
    RetsError: RetsError,
    RetsReplyError: RetsReplyError,
    RetsServerError: RetsServerError,
    RetsProcessingError: RetsProcessingError,
    RetsParamError: RetsParamError,
    RetsPermissionError: RetsPermissionError,
    ensureRetsError: ensureRetsError,
    getErrorMessage: getErrorMessage
  };

}).call(this);

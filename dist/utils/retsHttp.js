// Generated by CoffeeScript 1.12.7

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var Promise, callRetsMethod, debug, errors, expat, headersHelper, streamRetsMethod;

  Promise = require('bluebird');

  debug = require('debug')('rets-client:main');

  expat = require('node-expat');

  errors = require('./errors');

  headersHelper = require('./headers');

  callRetsMethod = function(retsContext, promisifiedRetsSession, client) {
    debug("RETS " + retsContext.retsMethod + ":", retsContext.queryOptions);
    return Promise["try"](function() {
      var request;
      request = {};
      if (client.settings.method === 'POST') {
        request.form = retsContext.queryOptions;
      } else {
        request.qs = retsContext.queryOptions;
      }
      return promisifiedRetsSession(request);
    })["catch"](function(error) {
      debug("RETS " + retsContext.retsMethod + " error:", error);
      return Promise.reject(error);
    }).spread(function(response, body) {
      var error;
      if (response.statusCode !== 200) {
        error = new errors.RetsServerError(retsContext, response.statusCode, response.statusMessage);
        debug("RETS " + retsContext.retsMethod + " error: " + error.message);
        return Promise.reject(error);
      }
      retsContext.headerInfo = headersHelper.processHeaders(response.rawHeaders);
      retsContext.body = body;
      retsContext.response = response;
      return retsContext;
    });
  };

  streamRetsMethod = function(retsContext, regularRetsSession, client) {
    var done, errorHandler, request, responseHandler, stream;
    debug("RETS " + retsContext.retsMethod + " (streaming)", retsContext.queryOptions);
    done = false;
    errorHandler = function(error) {
      if (done) {
        return;
      }
      done = true;
      debug("RETS " + retsContext.retsMethod + " (streaming) error:", error);
      return retsContext.errorHandler(error);
    };
    responseHandler = function(response) {
      var error;
      if (done) {
        return;
      }
      done = true;
      retsContext.headerInfo = headersHelper.processHeaders(response.rawHeaders);
      if (response.statusCode !== 200) {
        error = new errors.RetsServerError(retsContext, response.statusCode, response.statusMessage);
        debug("RETS " + retsContext.retsMethod + " (streaming) error: " + error.message);
        return typeof retsContext.errorHandler === "function" ? retsContext.errorHandler(error) : void 0;
      } else {
        return typeof retsContext.responseHandler === "function" ? retsContext.responseHandler(response) : void 0;
      }
    };
    request = {};
    if (client.settings.method === 'POST') {
      request.form = retsContext.queryOptions;
    } else {
      request.qs = retsContext.queryOptions;
    }
    if (retsContext.retsMethod === 'getObject') {
      request.headers = {
        Accept: '*/*'
      };
    }
    stream = regularRetsSession(request);
    stream.on('error', errorHandler);
    stream.on('response', responseHandler);
    stream.pipe(retsContext.parser);
    return retsContext;
  };

  module.exports = {
    callRetsMethod: callRetsMethod,
    streamRetsMethod: streamRetsMethod
  };

}).call(this);
